CREATE TABLE PESSOAS (
   cpf VARCHAR (11) NOT NULL PRIMARY KEY,
   nome VARCHAR (150) NOT NULL,
   data_nascimento DATE,
   telefone VARCHAR(9)
);

-------------------------------------------------

CREATE TABLE ENTREGADORES(
    fk_cpf_entregador PRIMARY KEY,
    idade INTEGER NOT NULL,
    cnh char (15) NOT NULL,
    foto BLOB NOT NULL,
    FOREIGN KEY (fk_cpf_entregador) REFERENCES PESSOAS
);

-------------------------------------------------

CREATE TABLE CLIENTES(
    fk_cpf_cliente PRIMARY KEY,
    FOREIGN KEY (fk_cpf_cliente) REFERENCES PESSOAS(cpf)
);

-------------------------------------------------

CREATE TABLE CARTOES (
    NRO_CARTAO INTEGER PRIMARY KEY,
    CVV INTEGER NOT NULL,
    CPF_CLIENTE_CARTAO,
    FOREIGN KEY(CPF_CLIENTE_CARTAO) REFERENCES CLIENTES
);

-------------------------------------------------

CREATE TABLE LOGINS (
    usuario VARCHAR (20) NOT NULL PRIMARY KEY,
    senha VARCHAR (20) NOT NULL,
    fk_cpf_pessoa VARCHAR (11) NOT NULL UNIQUE,
    FOREIGN KEY (fk_cpf_pessoa) REFERENCES PESSOAS (cpf)
);

-------------------------------------------------

CREATE SEQUENCE id_tipo_endereco_seq
    START WITH 1
    INCREMENT BY 1;

-------------------------------------------------

CREATE TABLE TIPOS_ENDERECO (
    id_tipo_endereco INTEGER PRIMARY KEY,
    tipo_endereco VARCHAR(20) NOT NULL
);

-------------------------------------------------

CREATE OR REPLACE TRIGGER ID_TIPOS_ENDERECO_INCREMENTO
BEFORE INSERT ON TIPOS_ENDERECO
FOR EACH ROW
  WHEN (new.ID_TIPO_ENDERECO IS NULL)
BEGIN
  :new.ID_TIPO_ENDERECO := ID_TIPO_ENDERECO_SEQ.NEXTVAL;
END;

-------------------------------------------------

CREATE TABLE ENDERECOS (
    COD_ENDERECO INTEGER,
    RUA VARCHAR(50) NOT NULL,
    BAIRRO VARCHAR(50) NOT NULL,
    CIDADE VARCHAR(50) NOT NULL,
    COMPLEMENTO VARCHAR(50),
    NUMERO INTEGER NOT NULL,
    CPF_CLIENTE NOT NULL,
    ID_TIPO_ENDERECO NOT NULL,
    PRIMARY KEY(COD_ENDERECO, CPF_CLIENTE),
    FOREIGN KEY(CPF_CLIENTE) REFERENCES CLIENTES,
    FOREIGN KEY(ID_TIPO_ENDERECO) REFERENCES TIPOS_ENDERECO
);

-------------------------------------------------

CREATE SEQUENCE COD_ENDERECOS_SEQ
    START WITH 1
    INCREMENT BY 1;

-------------------------------------------------

CREATE OR REPLACE TRIGGER COD_ENDERECO_INCREMENTO
BEFORE INSERT ON ENDERECOS
FOR EACH ROW
  WHEN (new.COD_ENDERECO IS NULL)
BEGIN
  :new.COD_ENDERECO := COD_ENDERECOS_SEQ.NEXTVAL;
END;

-------------------------------------------------

CREATE TABLE CONTAS_BANCARIAS (
    NRO_CONTA INTEGER PRIMARY KEY,
    AGENCIA INTEGER NOT NULL,
    TIPO_CONTA VARCHAR(30) NOT NULL,
    BANCO VARCHAR(50) NOT NULL,
    CPF_ENTREGADOR,
    FOREIGN KEY (CPF_ENTREGADOR) REFERENCES ENTREGADORES
);

-------------------------------------------------

CREATE TABLE CATEGORIA_ITENS (
    COD_CATEGORIA INTEGER PRIMARY KEY,
    NOME VARCHAR(50) NOT NULL,
    COD_SUB_CATEGORIA INTEGER,
    FOREIGN KEY(COD_SUB_CATEGORIA) REFERENCES CATEGORIA_ITENS
);

-------------------------------------------------

CREATE SEQUENCE cod_categoria_seq
    START WITH 1
    INCREMENT BY 1;

-------------------------------------------------

CREATE OR REPLACE TRIGGER COD_CATEGORIA_ITENS_INCREMENTO
BEFORE INSERT ON CATEGORIA_ITENS
FOR EACH ROW
  WHEN (new.COD_CATEGORIA IS NULL)
BEGIN
  :new.COD_CATEGORIA := cod_categoria_seq.NEXTVAL;
END;

-------------------------------------------------

CREATE TABLE ITENS (
    COD_ITEM INTEGER PRIMARY KEY,
    NOME VARCHAR(50) NOT NULL,
    DESCRICAO VARCHAR(50) NOT NULL,
    VALOR NUMBER(8,2) NOT NULL,
    COD_CATEGORIA NOT NULL,
    FOREIGN KEY(COD_CATEGORIA) REFERENCES CATEGORIA_ITENS
);

-------------------------------------------------

CREATE SEQUENCE COD_ITEM_SEQ
    START WITH 1
    INCREMENT BY 1;

-------------------------------------------------

CREATE OR REPLACE TRIGGER COD_ITEM_INCREMENTO
BEFORE INSERT ON ITENS
FOR EACH ROW
  WHEN (new.COD_ITEM IS NULL)
BEGIN
  :new.COD_ITEM := COD_ITEM_SEQ.NEXTVAL;
END;

-------------------------------------------------

CREATE TABLE ITENS_CARDAPIO (
    COD_ITEM PRIMARY KEY,
    DATA_CARDAPIO DATE NOT NULL,
    VALOR_UNITARIO NUMBER(8,2) NOT NULL,
    FOREIGN KEY(COD_ITEM) REFERENCES ITENS
);

-------------------------------------------------

CREATE TABLE TRANSACOES (
    COD_TRANSACAO INTEGER PRIMARY KEY,
    SITUACAO VARCHAR(50) DEFAULT ('EM análise'),
    DATA_TRANSACAO DATE NOT NULL,
    NRO_CARTAO,
    FOREIGN KEY (NRO_CARTAO) REFERENCES CARTOES
);

-------------------------------------------------

CREATE SEQUENCE COD_TRANSACAO_SEQ
    START WITH 1
    INCREMENT BY 1;

-------------------------------------------------

CREATE OR REPLACE TRIGGER COD_TRANSACAO_INCREMENTO
BEFORE INSERT ON TRANSACOES
FOR EACH ROW
  WHEN (new.COD_TRANSACAO IS NULL)
BEGIN
  :new.COD_TRANSACAO := COD_TRANSACAO_SEQ.NEXTVAL;
END;

-------------------------------------------------

CREATE TABLE PAGAMENTOS (
    COD_PAGAMENTO INTEGER PRIMARY KEY,
    TIPO_PAGAMENTO VARCHAR(50) NOT NULL,
    COD_TRANSACAO,
    FOREIGN KEY (COD_TRANSACAO) REFERENCES TRANSACOES
);

-------------------------------------------------

CREATE SEQUENCE COD_PAGAMENTOS_SEQ
    START WITH 1
    INCREMENT BY 1;

-------------------------------------------------

CREATE OR REPLACE TRIGGER COD_PAGAMENTOS_INCREMENTO
BEFORE INSERT ON PAGAMENTOS
FOR EACH ROW
  WHEN (new.COD_PAGAMENTO IS NULL)
BEGIN
  :new.COD_PAGAMENTO := COD_PAGAMENTOS_SEQ.NEXTVAL;
END;

-------------------------------------------------

CREATE TABLE PEDIDOS (
    COD_PEDIDO INTEGER,
    SITUACAO VARCHAR(50) DEFAULT('Em análise'),
    VALOR_TOTAL NUMBER(8,2) NOT NULL,
    DATA_PEDIDO DATE NOT NULL,
    CPF CLIENTE,
    COD_PAGAMENTO,
    PRIMARY KEY(COD_PEDIDO, COD_PAGAMENTO, CPF_CLIENTE),
    FOREIGN KEY(CPF_CLIENTE) REFERENCES CLIENTES,
    FOREIGN KEY(COD_PAGAMENTO) REFERENCES PAGAMENTOS
);

-------------------------------------------------

CREATE SEQUENCE COD_PEDIDOS_SEQ
    START WITH 1
    INCREMENT BY 1;

-------------------------------------------------

CREATE OR REPLACE TRIGGER COD_PEDIDOS_INCREMENTO
BEFORE INSERT ON PEDIDOS
FOR EACH ROW
  WHEN (new.COD_PEDIDO IS NULL)
BEGIN
  :new.COD_PEDIDO := COD_PEDIDOS_SEQ.NEXTVAL;
END;

-------------------------------------------------

CREATE TABLE ENTREGAS (
    COD_ENTREGA INTEGER,
    COD_PEDIDO,
    CPF_ENTREGADOR NOT NULL,
    VALOR_TAXA_ENTREGA NUMBER(8,2) NOT NULL,
    DATA_ENTREGA DATE NOT NULL,
    PRIMARY KEY(COD_ENTREGA, COD_PEDIDO, CPF_ENTREGADOR),
    FOREIGN KEY(CPF_ENTREGADOR) REFERENCES ENTREGADORES
);

-------------------------------------------------

CREATE SEQUENCE COD_ENTREGAS_SEQ
    START WITH 1
    INCREMENT BY 1;

-------------------------------------------------

CREATE OR REPLACE TRIGGER COD_ENTREGAS_INCREMENTO
BEFORE INSERT ON ENTREGAS
FOR EACH ROW
  WHEN (new.COD_ENTREGA IS NULL)
BEGIN
  :new.COD_ENTREGA := COD_ENTREGAS_SEQ.NEXTVAL;
END;

-------------------------------------------------

CREATE TABLE REPASSES (
    DATA_REPASSE DATE NOT NULL,
    COD_ENTREGA NOT NULL,
    NRO_CONTA_BANCARIA NOT NULL,
    PRIMARY KEY(DATA_REPASSE, COD_ENTREGA, NRO_CONTA_BANCARIA),
    FOREIGN KEY(COD_ENTREGA) REFERENCES ENTREGAS,
    FOREIGN KEY(NRO_CONTA_BANCARIA) REFERENCES CONTAS_BANCARIAS
);